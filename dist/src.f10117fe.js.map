{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADOA,IAAA,IAAA;ACLA,ADKA,ICLM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AAAE,ADKxB,ECLwB,IAAI,EAAE,IDK9B,ICLsB;AAAkB,ADQtC,ECRsC,GAAG,EAAE,IDQ3C,IAAA,CAAoB,IAApB,EAAmC;ACRf,ADQA,CCRT,CAAb,ODQsB,IAAA,GAAA,IAAA;ACNtB,ADIE,ICJE,CAAC,EAAL,CAAQ,CDIN,MAAA,CCJF,EAAkB,ADIwB,EAAxC,UCJgB;AAChB,ADKwC,ECLxC,OAAO,CAAC,GAAR,CAAY,WAAZ;AACD,CAFD;AAGA,ADKE,EAAA,ECLE,CAAC,CDKH,CCLF,ADKE,CCLM,QAAR,ADKE,CAAA,CCLgB,EDKhB,GAAA,OCLgB,GDKZ,QAAJ,EAAoB;ACJpB,ADKE,ECLF,OAAO,CAAC,CDKC,ECLT,CAAY,EDKE,IAAL,CAAU,ICLnB,IDKS,CAAP;ACJH,ADKE,CCPH,EDKE;ACFF,IAAI,CAAC,EAAL,CAAQ,MAAR,EAAgB,YAAA;AACd,ADKA,ECLA,ADKA,IAAA,CAAA,ECLO,CAAC,GAAR,CAAY,EDKZ,CAAA,GAAA,GAAA,UAAI,CCLJ,KDKA,EAAqB;ACJtB,ADKG,CCPJ,GDOI,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAzB;ACHJ,ADIG,GAFD,CCFE,CAAC,OAAL,CAAa,MAAb;AAEA,OAAO,CAAC,GAAR,CAAY,IAAZ;ADIE,EAAA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;AACtC,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,SAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;AACD,GAJD;;AAMA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;AACvB,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;;AAEA,QAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;AACtC;AACD;;AAED,IAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;AACvB,MAAA,QAAQ;AACT,KAFD;AAGD,GAVD;;AAWF,SAAA,IAAA;AA9BA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\r\n  name?: string;\r\n  age?: number;\r\n}\r\n\r\ntype Callback = () => void;\r\n\r\nexport class User {\r\n  events: { [key: string]: Callback[] } = {};\r\n\r\n  constructor(private data: UserProps) { }\r\n\r\n  get(propName: string): (string | number) {\r\n    return this.data[propName];\r\n  }\r\n\r\n  set(update: UserProps): void {\r\n    Object.assign(this.data, update);\r\n  }\r\n\r\n  on(eventName: string, callback: Callback): void {\r\n    const handlers = this.events[eventName] || [];\r\n    handlers.push(callback);\r\n    this.events[eventName] = handlers;\r\n  }\r\n\r\n  trigger(eventName: string): void {\r\n    const handlers = this.events[eventName];\r\n\r\n    if (!handlers || handlers.length === 0) {\r\n      return;\r\n    }\r\n\r\n    handlers.forEach(callback => {\r\n      callback();\r\n    });\r\n  }\r\n}\r\n","import { User } from './models/User';\r\n\r\nconst user = new User({ name: 'myname', age: 20 });\r\n\r\nuser.on('change', () => {\r\n  console.log('Change #1');\r\n});\r\nuser.on('change', () => {\r\n  console.log('Change #2');\r\n});\r\nuser.on('save', () => {\r\n  console.log('Save was triggered');\r\n});\r\n\r\nuser.trigger('save');\r\n\r\nconsole.log(user);\r\n"]}